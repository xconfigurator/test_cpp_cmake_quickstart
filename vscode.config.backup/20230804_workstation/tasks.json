{
    // liyang add "cd build"
    "options": {
        "cwd": "${workspaceFolder}/build"
    },
    "tasks": [
        // //////////////////////////////////////////////////////
        // liuyang add build
        {
            "label": "build", 
            "dependsOn":[
                "cmake",
                "make"
            ]
        },
        // liuyang add cmake
        {
            "label": "cmake",
            "type": "shell",
            "command": "cmake",
            "args": [
                "-G \"MinGW Makefiles\"",// 202308041849 实测加不加这句话貌似都是用的gcc的工具链。这个与单纯在命令行中执行有所不同。
                ".."
            ]
        },
        // liuyang add make
        {
            "label": "make",
            "group": {
                "kind": "build",
                "isDefault": true
            },
            "command": "mingw32-make", // 以实际运行时使用的MingGW里面带的程序名称为准
            "args": [

            ]
        },
        // //////////////////////////////////////////////////////
        // VSCode自己利用g++编译（VSCode自己生成的）
        {
            "type": "cppbuild",
            "label": "C/C++: g++.exe 生成活动文件",
            "command": "C:\\Program Files\\CodeBlocks\\MinGW\\bin\\g++.exe",
            "args": [
                "-g",
                "${file}",
                "-o",
                "${fileDirname}\\${fileBasenameNoExtension}.exe"
            ],
            /*
            // 笔记，也可以这样编译多文件项目：
            "args": [
                "-g",
                "main.cpp",
                "swap.cpp",
                "-o",
                "${fileDirname}\\${fileBasenameNoExtension}.exe"
            ],
            */
            "options": {
                "cwd": "${fileDirname}"
            },
            "problemMatcher": [
                "$gcc"
            ],
            "group": {
                "kind": "build",
                "isDefault": true
            },
            "detail": "调试器生成的任务。"
        }
    ],
    "version": "2.0.0"
}